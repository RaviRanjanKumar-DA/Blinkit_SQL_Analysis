use [blinkit]
select * from [dbo].[Customers]
select * from [dbo].[Orders]
select * from [dbo].[Stores]
select * from [dbo].[OrdersDetails]
select * from [dbo].[Deliveries]

------------------------------------------------------
--- Part A: SQL Proficiency (Operational Analysis) ---
------------------------------------------------------

---1. Calculate the average delivery time for all orders in each city.

select s.City, avg(DeliveryTime)as DeliveryTime from 
Orders o join Stores s 
on o.StoreID = s.StoreID
group by s.City

---2. Find the top 3 customers based on the total order value they have placed
select top 3 c.CustomerID, c.Name, sum(o.TotalAmount) as OrderValue from
Orders o join Customers c
on o.CustomerID = c.CustomerID
group by c.CustomerID, c.Name
order by OrderValue desc


---3. Retrieve the top 3 most frequently ordered products in Mumbai
select top 3 p.ProductName, SUM(od.Quantity) as TotalQuantity from
Orders o join OrdersDetails od on o.OrderID = od.OrderID
join Products p on od.ProductID = p.ProductID
join Stores s on o.StoreID =s.StoreID
where s.City='Mumbai'
group by p.ProductName
order by TotalQuantity desc

---4. Identify the number of customers who have not placed an order in the last 30 days
select count(c.CustomerID) as CustomerRecentOrderNull from
Customers c left join Orders o
	on c.CustomerID = o.CustomerID and
	o.OrderDate >= DATEADD(day, -30, getdate())
where o.OrderID is null

---5. Calculate the total revenue generated by each store.
select s.StoreID, s.City, SUM(o.TotalAmount) as TotalRevenue from
Orders o join Stores s
	on o.StoreID = s.StoreID
group by s.StoreID, s.City, s.Area
order by TotalRevenue desc





---------------------------------------------------------------------
--- Part B: Problem Solving (Customer Retention & Churn Analysis) ---
---------------------------------------------------------------------
---1. Write a SQL query to identify customers who placed only one order in the last 3 months.
select c.CustomerID, c.Name from
Customers c join Orders o on c.CustomerID = o.CustomerID
where o.OrderDate >= dateadd(month, -3, getdate())
group by c.CustomerID, c.Name
having count(o.OrderID) = 1


---2. Create a list of cities with high percentages of single-order customers.
with Table1 as(
select City, count(CustomerID) as AllCust 
from Customers
group by City),

Table2 as(
select City, count(CustomerID) as OneOrderCust 
from Customers
where  TotalOrders =1
group by City) 

select t1.City, t2.OneOrderCust, t1.AllCust, (t2.OneOrderCust *100 / t1.AllCust) as CustPercentage
from Table1 t1 left join Table2 t2
on t1.City = t2.City
order by OneOrderCust desc



---3. Suggest 3 features you would consider to build a customer churn prediction model.

-- Feature 1: Time Duration (Days since last order)
-- Feature 2: Total Orders
-- Feature 3: Avg Order Value (Monetary)

with Duration as (
select CustomerID, datediff(day, max(LastOrderDate), getdate()) as DurationSinceLastOrder
from Customers
group by CustomerID),

CustomersTotalOrder as (
select CustomerID, TotalOrders
from Customers),

AvgOrderValue as (
select CustomerID, avg(TotalAmount) as AvgValue
from Orders
group by CustomerID)

--- Combine all features into one result set

select
d.CustomerID,
d.DurationSinceLastOrder,
c.TotalOrders,
a.AvgValue
from Duration d
join CustomersTotalOrder c on d.CustomerID = c.CustomerID
join AvgOrderValue a on d.CustomerID = a.CustomerID



---4. Based on the above, outline 2-3 strategies Blinkit could implement to improve customer retention.

-- Identify customers who haven't placed an order in the last 30 days
select CustomerID, Name, datediff(day,LastOrderDate, getdate()) as LastOrderDays
from Customers
where datediff(day,LastOrderDate, getdate()) >30
-- Those customers who haven't ordered in last 30 days send emails to remind them or send emails with offers like 10% discount or free delivery etc to encourage them.


-- Identify customers with an average order value above a certain threshold
with AvgOrderValue as (
select CustomerID, avg(TotalAmount) as AvgValue
from Orders
group by CustomerID)

select a.CustomerID, c.Name, a.AvgValue
from AvgOrderValue a
join Customers c on a.CustomerID = c.CustomerID
where a.AvgValue >250


-- Identify customers who have placed fewer than 3 orders
select CustomerID, Name, TotalOrders
from Customers
where TotalOrders <3




------------------------------------------------------------------
--- Part C: Business Case Study (Efficiency & Growth Strategy) ---
------------------------------------------------------------------

---1. Analyze the relationship between the distance covered by delivery agents and the average delivery time. Use SQL to derive correlation metrics.
-- Step 1: Calculate the required sums for correlation
with TableA as (
select OrderID, DATEDIFF(minute, DeliveryStartTime, DeliveryEndTime) as DeliveryTime, DistanceCovered_km
from Deliveries),

-- Step 2: Calculate the averages needed for correlation
TableB as (
select 
	count(*) as cnt,
	sum(DeliveryTime) as DelTime,
	sum(DistanceCovered_km) as DstCvd,
	sum(DeliveryTime * DistanceCovered_km) as SumDxDC,
	sum(DeliveryTime * DeliveryTime) as SumDxD,
	sum(DistanceCovered_km * DistanceCovered_km) as SumDCxDC
from TableA)

-- Step 3: Calculate the correlation coefficient using the formula for Pearson correlation
select 
	(cnt * SumDxDC - DelTime * DstCvd) / 
SQRT((cnt * SumDxD - DelTime * DelTime) * (cnt * SumDCxDC - DstCvd * DstCvd))
as CorrelationCoefficient
from TableB


---2. Recommend 3 strategies to optimize store-level operations and improve delivery efficiency.
-- Step 1: Calculate the total quantity ordered for each product in each store
with TableA as (
select o.StoreID, od.ProductID, p.ProductName, sum(od.Quantity) as TotalQty
from orders o
join OrdersDetails od on o.OrderID = od.OrderID
join Products p on od.ProductID = p.ProductID
group by o.StoreID, od.ProductID, p.ProductName)


-- Step 2: Rank the product by total quantity ordered in each store
select StoreID, ProductID, ProductName, TotalQty, rank() over (partition by StoreID order by TotalQty desc) as PopularProduct
from TableA
order by StoreID, PopularProduct



---3. Develop a Revenue Maximization Formula for Blinkit using the most relevant factors and explain those as well
-- Define constants for cost per order, delivery cost, and upsell factor
declare @CostPerOrder int = 50		-- Flat cost per order
declare @DeliveryCost int = 30		-- Flat delivery cost per order
declare @UpsellFactor decimal(5,2) = 0.10 --10% sdditional revenue from upselling/cross-selling

-- Step 1: Calculate the total revenue, total number of orders, and average order value
select	count(OrderID) as TotalOrders,
		sum(TotalAmount) as TotalRevenue,
		avg(TotalAmount) as AvgOrdValue
into #OrderStat
from Orders
where Status = 'Completed'

-- Step 2: Calculate the total cost (procurement and delivery) based on the total number of orders
select	TotalOrders,
		(TotalOrders * @CostPerOrder) as TotalCostPerOrder,
		(TotalOrders * @DeliveryCost) as TotalDeliveryCost
into #CostStat
from #OrderStat

-- Step 3: Calculate the upsell/cross-sell revenue (additional 10% of total revenue)
select (TotalAmount * @UpsellFactor) as TotalUpsellCost
into #UpsellStat
from Orders
where Status = 'Completed'

-- Step 4: Calculate the final net revenue using the formula
select 
	os.TotalRevenue, cs.TotalCostPerOrder, cs.TotalDeliveryCost, us.TotalUpsellCost,
	(os.TotalRevenue + us.TotalUpsellCost - cs.TotalCostPerOrder - cs.TotalDeliveryCost) as NetRevenue
from #OrderStat os
cross join #CostStat cs
cross join #UpsellStat us

-- Clean up temporary tables
drop table #OrderStat, #CostStat, #UpsellStat


---4. Generate a Per Order Profit Maximization Formula based on your understanding of Blinkit and Quick Commerce
-- Define constants for operational cost per order and delivery cost
declare @OprationCost int = 20			--Flat operational cost per order
declare @DeliuveryCostPerOrder int = 30	--Flat delivery cost per order	

-- Step 1: Calculate Revenue per Order (using TotalAmount from the Orders table)
-- Step 2: Calculate Cost of Goods Sold (COGS) from the Products and OrderDetails tables
-- Step 3: Subtract costs to calculate per order profit
select	o.OrderID,
		o.TotalAmount as RevenuePerOrder,
		sum(p.Price * od.Quantity) as GoodsCost,
		@OprationCost as OperationalCost,
		@DeliuveryCostPerOrder as DeliveryCost,
 -- Profit per order : Revenue - (GoodsCost + Delivery Cost + Operational Cost)
		(o.TotalAmount - (sum(p.Price * od.Quantity) + @OprationCost + @DeliuveryCostPerOrder)) as ProfitPerOrder
from Orders o
join OrdersDetails od on o.OrderID = od.OrderID
join Products p on od.ProductID = p.ProductID
where o.Status = 'Completed'
group by o.OrderID, o.TotalAmount


---5. Make a holistic comparison of Blinkit, Zepto, Instamart and BB on most important factors. You can use the internet for gathering relevant data.
/*
Market Share & Popularity: Blinkit is the leader in fast deliveries in India, holding about 45% of the market, offering a wide variety of products including tech gadgets. Instamart (Swiggy) has 27% market share, followed by Zepto at 21%. BigBasket focuses more on larger, variety-rich orders and not on quick deliveries, but it still has a strong presence in the overall grocery market.
Delivery Speed: Blinkit, Zepto, and Instamart all promise deliveries in 10-20 minutes, with Blinkit being slightly more consistent. BigBasket, however, delivers on the same day or next day, targeting bulk orders instead of speed.
Pricing: Blinkit generally offers the lowest prices on essential groceries like vegetables and milk. BigBasket is more competitive for large orders but doesn't directly compete in fast delivery.
Product Variety: BigBasket has the widest range of products, including groceries, household items, and specialty foods. Blinkit offers a mix, including tech gadgets, while Zepto and Instamart focus mostly on groceries and essentials.
In short, Blinkit is the top choice for fast deliveries, while BigBasket is better for bigger, variety-packed orders. Zepto and Instamart are strong players in urban areas.
/*




